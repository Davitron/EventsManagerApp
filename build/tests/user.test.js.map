{"version":3,"sources":["../../server/tests/user.test.js"],"names":["should","Users","User","use","Token","resetToken","describe","it","done","request","post","send","email","username","password","confirmPassword","end","err","res","have","status","body","be","an","property","message","errors","eql","internet","userName","userDetails","token","get","data","metaData","length","above","delete","set","after","destroy","where"],"mappings":"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","file":"user.test.js","sourcesContent":["import chai from 'chai';\nimport chaiHttp from 'chai-http';\nimport faker from 'faker';\nimport '../env.test';\nimport app from '../server';\nimport model from '../models';\n\n\nconst should = chai.should(); // eslint-disable-line\nconst Users = model.User;\n\nchai.use(chaiHttp);\n\nlet Token;\nlet resetToken;\n\ndescribe('Testing Authentication Routes', () => {\n  describe('POST /api/v1/users', () => {\n    // TESTING INVAILD USER INPUT FOR REGISTRATION\n    it('Should return HTTP 400 and message if email is invalid format', (done) => {\n      chai.request(app)\n        .post('/api/v1/users')\n        .send({\n          email: 'fjlahflaehfa',\n          username: 'danny',\n          password: 'lolomimi',\n          confirmPassword: 'lolomimi'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message');\n          res.body.message.should.have.property('errors');\n          res.body.message.errors.should.have.property('email');\n          res.body.message.errors.email.should.be.an('array');\n          res.body.message.errors.email[0].should.eql('The email format is invalid.');\n          done();\n        });\n    });\n\n    it('should return HTTP 400 if email is not given', (done) => {\n      chai.request(app)\n        .post('/api/v1/users')\n        .send({\n          username: 'danny',\n          password: 'lolomimi',\n          confirmPassword: 'lolomimi'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message');\n          res.body.message.errors.should.have.property('email');\n          res.body.message.errors.email.should.be.an('array');\n          res.body.message.errors.email[0].should.eql('The email field is required.');\n          done();\n        });\n    });\n\n    it('should return HTTP 400 when given username is less than minimum string required', (done) => {\n      chai.request(app)\n        .post('/api/v1/users')\n        .send({\n          email: 'mail@mail.com',\n          username: 'd',\n          password: 'lolomimi',\n          confirmPassword: 'lolomimi'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message');\n          res.body.message.errors.should.have.property('username');\n          res.body.message.errors.username.should.be.an('array');\n          res.body.message.errors.username[0].should.eql('The username must be at least 3 characters.');\n          done();\n        });\n    });\n\n    it('Should return HTTP 400 when username is not given', (done) => {\n      chai.request(app)\n        .post('/api/v1/users')\n        .send({\n          email: 'mail@mail.com',\n          password: 'lolomimi',\n          confirmPassword: 'lolomimi'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message');\n          res.body.message.errors.should.have.property('username');\n          res.body.message.errors.username.should.be.an('array');\n          res.body.message.errors.username[0].should.eql('The username field is required.');\n          done();\n        });\n    });\n\n    it('should return HTTP 400 when given username is more than maximum string required', (done) => {\n      chai.request(app)\n        .post('/api/v1/users')\n        .send({\n          email: 'mail@mail.com',\n          username: 'dojkorajpoajpiajpriaPBJPIBj',\n          password: 'lolomimi',\n          confirmPassword: 'lolomimi'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message');\n          res.body.message.errors.should.have.property('username');\n          res.body.message.errors.username.should.be.an('array');\n          res.body.message.errors.username[0].should.eql('The username may not be greater than 16 characters.');\n          done();\n        });\n    });\n\n    it('should return HTTP 400 when password is not given', (done) => {\n      chai.request(app)\n        .post('/api/v1/users')\n        .send({\n          email: 'mail@mail.com',\n          username: faker.internet.userName(),\n          confirmPassword: 'lolomimi'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message');\n          res.body.message.errors.should.have.property('password');\n          res.body.message.errors.password.should.be.an('array');\n          res.body.message.errors.password[0].should.eql('The password field is required.');\n          done();\n        });\n    });\n\n    it('should return HTTP 400 when given password is less than minimum string required', (done) => {\n      chai.request(app)\n        .post('/api/v1/users')\n        .send({\n          email: 'mail@mail.com',\n          username: 'dojkor',\n          password: 'lolo',\n          confirmPassword: 'lol0'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message');\n          res.body.message.errors.should.have.property('password');\n          res.body.message.errors.password.should.be.an('array');\n          res.body.message.errors.password[0].should.eql('The password must be at least 6 characters.');\n          done();\n        });\n    });\n\n    it('should return HTTP 400 when password confirmation is not provided', (done) => {\n      chai.request(app)\n        .post('/api/v1/users')\n        .send({\n          email: 'mail@mail.com',\n          username: 'dojkorajpoajpiajpriaPBJPIBj',\n          password: 'lolojhjsovh'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message');\n          res.body.message.errors.should.have.property('confirmPassword');\n          res.body.message.errors.confirmPassword.should.be.an('array');\n          res.body.message.errors.confirmPassword[0].should.eql('The confirmPassword field is required.');\n          done();\n        });\n    });\n\n    // VALID USER INPUT\n\n    it('should return HTTP 201 when fields are pass validation', (done) => {\n      chai.request(app)\n        .post('/api/v1/users')\n        .send({\n          email: 'matthews.segun@gmail.com',\n          username: 'davido',\n          password: 'minerva',\n          confirmPassword: 'minerva',\n        })\n        .end((err, res) => {\n          res.should.have.status(201);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message');\n          res.body.should.have.property('token');\n          res.body.should.have.property('userDetails');\n          res.body.userDetails.should.be.an('object');\n          res.body.should.have.property('statusCode').eql(201);\n          Token = res.body.token;\n          done();\n        });\n    });\n\n    it('should return HTTP 400 when fields are pass validation but user email is taken', (done) => {\n      chai.request(app)\n        .post('/api/v1/users')\n        .send({\n          email: 'matthews.segun@gmail.com',\n          username: 'minato',\n          password: 'lolojhjsovh',\n          confirmPassword: 'lolojhjsovh',\n        })\n        .end((err, res) => {\n          res.should.have.status(409);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message').eql('email or username already taken');\n          done();\n        });\n    });\n\n    it('should return HTTP 400 when given password is not the same with the password confirmation', (done) => {\n      chai.request(app)\n        .post('/api/v1/users')\n        .send({\n          email: 'matthews.segun@gmailer.com',\n          username: 'minato',\n          password: 'lolojhjsovhajhovha',\n          confirmPassword: 'lolojhjsovh',\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message').eql('Passwords do not match');\n          done();\n        });\n    });\n  });\n\n  describe('GET /api/v1/users/completeRegistration', () => {\n    it('should return 200', (done) => {\n      chai.request(app)\n        .get(`/api/v1/users/completeRegistration?token=${Token}`)\n        .end((err, res) => {\n          res.should.have.status(200);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message');\n          done();\n        });\n    });\n\n    it('should return 400 if user is already verified', (done) => {\n      chai.request(app)\n        .get(`/api/v1/users/completeRegistration?token=${Token}`)\n        .end((err, res) => {\n          res.should.have.status(409);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message');\n          done();\n        });\n    });\n  });\n\n  describe('POST /api/v1/users/login', () => {\n    // TESTING FOR INVALID USER INPUT\n\n    it('should return 400 if email is not a valid email format', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/login')\n        .send({\n          email: 'matthews.segun.com',\n          password: 'minerva'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message');\n          res.body.message.errors.should.have.property('email');\n          res.body.message.errors.email.should.be.an('array');\n          res.body.message.errors.email[0].should.eql('The email format is invalid.');\n          done();\n        });\n    });\n\n    it('should return invalid 400 if email does not exist', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/login')\n        .send({\n          email: 'nomail@nomial.nomail',\n          password: 'minerva'\n        })\n        .end((err, res) => {\n          res.should.have.status(401);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message').eql('Invalid Login Credentials');\n          done();\n        });\n    });\n\n    it('should return HTTP 400 when password is not correct', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/login')\n        .send({\n          email: 'matthews.segun@gmail.com',\n          password: 'gojfiepfe'\n        })\n        .end((err, res) => {\n          res.should.have.status(401);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message').eql('Invalid Login Credentials');\n          done();\n        });\n    });\n    it('should return H TTP 200 when email and password are correct', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/login')\n        .send({\n          email: 'matthews.segun@gmail.com',\n          password: 'minerva'\n        })\n        .end((err, res) => {\n          res.should.have.status(200);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message');\n          done();\n        });\n    });\n  });\n\n  describe('POST /api/v1/users/reset', () => {\n    it('should return 40o if email is wrong format', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/reset')\n        .send({\n          email: 'matthews.segun@yahoo',\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message');\n          res.body.message.errors.should.have.property('email');\n          res.body.message.errors.email.should.be.an('array');\n          res.body.message.errors.email[0].should.eql('The email format is invalid.');\n          done();\n        });\n    });\n\n    it('should return 404 if email does not exist', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/reset')\n        .send({\n          email: 'matthews.segun@yahoo.com'\n        })\n        .end((err, res) => {\n          res.should.have.status(404);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message').eql('User does not exist');\n          done();\n        });\n    });\n\n    it('should return 400 if email in not valid', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/reset')\n        .send({\n          email: 'matthews.segun@yahoo',\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message');\n          res.body.message.errors.should.have.property('email');\n          res.body.message.errors.email.should.be.an('array');\n          res.body.message.errors.email[0].should.eql('The email format is invalid.');\n          done();\n        });\n    });\n\n    it('should return 200 id email is valid and email exist', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/reset')\n        .send({\n          email: 'matthews.segun@gmail.com'\n        })\n        .end((err, res) => {\n          res.should.have.status(200);\n          res.body.should.be.an('object');\n          res.body.should.have.property('token');\n          res.body.should.have.property('message').eql('Password reset link is sent');\n          resetToken = res.body.token;\n          done();\n        });\n    });\n  });\n\n  describe('POST /api/v1/users/password', () => {\n    it('should return 400 if new password length is less than 6', (done) => {\n      chai.request(app)\n        .post(`/api/v1/users/password?token=${resetToken}`)\n        .send({\n          password: 'play',\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message');\n          res.body.message.errors.should.have.property('password');\n          res.body.message.errors.password.should.be.an('array');\n          res.body.message.errors.password[0].should.eql('The password must be at least 6 characters.');\n          done();\n        });\n    });\n\n    it('should return 403 if token is invalid', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/password?token=ljwgkwgfuwkgfuwgf')\n        .send({\n          password: 'playcool'\n        })\n        .end((err, res) => {\n          res.should.have.status(403);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message').eql('Token is invalid or expired');\n          done();\n        });\n    });\n\n    it('should return 403 if tno token was provided', (done) => {\n      chai.request(app)\n        .post('/api/v1/users/password?token=')\n        .send({\n          password: 'playcool'\n        })\n        .end((err, res) => {\n          res.should.have.status(403);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message').eql('No Token Was Provided');\n          done();\n        });\n    });\n\n    it('should return 400 if passwords do not match', (done) => {\n      chai.request(app)\n        .post(`/api/v1/users/password?token=${resetToken}`)\n        .send({\n          password: 'playcool',\n          confirmPassword: 'playcoolin'\n        })\n        .end((err, res) => {\n          res.should.have.status(400);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message').eql('Passwords do not match');\n          done();\n        });\n    });\n\n    it('should return 200 if password reset is successful', (done) => {\n      chai.request(app)\n        .post(`/api/v1/users/password?token=${resetToken}`)\n        .send({\n          password: 'playcool',\n          confirmPassword: 'playcool'\n        })\n        .end((err, res) => {\n          res.should.have.status(200);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message').eql('Password reset successful. You can proceed to Login');\n          done();\n        });\n    });\n  });\n\n  describe('GET /api/v1/user/', () => {\n    it('should fetch all users in the database', (done) => {\n      chai.request(app)\n        .get('/api/v1/users')\n        .end((err, res) => {\n          res.should.have.status(200);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message');\n          res.body.should.have.property('statusCode');\n          res.body.should.have.property('data');\n          res.body.should.have.property('metaData');\n          res.body.message.should.be.eql('Users Retrieved');\n          res.body.data.should.be.an('array');\n          res.body.metaData.should.be.an('object');\n          res.body.data.length.should.be.above(0);\n          done();\n        });\n    });\n  });\n\n  describe('DELETE /api/v1/users/:userId', () => {\n    // Testing to modify an event\n    it('Should return 404 if event does not exist', (done) => {\n      chai.request(app)\n        .delete(`/api/v1/users/${-1}`)\n        .set('x-access-token', Token)\n        .end((err, res) => {\n          res.should.have.status(401);\n          res.body.should.be.an('object');\n          res.body.should.have.property('message').eql('This user is not an administrator');\n          done();\n        });\n    });\n  });\n\n  after((done) => {\n    Users.destroy({\n      where: {\n        email: 'matthews.segun@gmail.com'\n      }\n    });\n    done();\n  });\n});\n"]}