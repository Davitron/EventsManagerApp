{"version":3,"sources":["../../server/tests/pagination.test.js"],"names":["mockRequestMeta","baseUrl","qString","limit","offset","describe","it","done","reqMeta","page","data","count","rows","id","username","email","result","createPagingData","should","be","an","equal","have","property","next","previous"],"mappings":";;;;AAAA;;;;;;AAEA,IAAMA,kBAAkB;AACtBC,WAAS,yBADa;AAEtBC,WAAS,4BAFa;AAGtBC,SAAO,CAHe;AAItBC,UAAQ;AAJc,CAAxB;;AAOAC,SAAS,+BAAT,EAA0C,YAAM;AAC9CA,WAAS,8BAAT,EAAyC,YAAM;AAC7CC,OAAG,yCAAH,EAA8C,UAACC,IAAD,EAAU;AACtD,UAAMC,uBAAeR,eAAf,IAAgCS,MAAM,CAAtC,GAAN;AACA,UAAMC,OAAO;AACXC,eAAO,EADI;AAEXC,cAAM,CACJ,EAAEC,IAAI,CAAN,EAASC,UAAU,OAAnB,EAA4BC,OAAO,iBAAnC,EADI;AAFK,OAAb;AAMA,UAAMC,SAAS,qBAAWC,gBAAX,CAA4BP,IAA5B,EAAkCF,OAAlC,CAAf;AACAQ,aAAOE,MAAP,CAAcC,EAAd,CAAiBC,EAAjB,CAAoB,QAApB;AACAJ,aAAOb,KAAP,CAAae,MAAb,CAAoBG,KAApB,CAA0Bb,QAAQL,KAAlC;AACAa,aAAOZ,MAAP,CAAcc,MAAd,CAAqBG,KAArB,CAA2Bb,QAAQJ,MAAnC;AACAY,aAAOP,IAAP,CAAYS,MAAZ,CAAmBG,KAAnB,CAAyBb,QAAQC,IAAjC;AACAO,aAAOE,MAAP,CAAcI,IAAd,CAAmBC,QAAnB,CAA4B,MAA5B;AACAP,aAAOQ,IAAP,CAAYN,MAAZ,CAAmBG,KAAnB,CAA4Bb,QAAQP,OAApC;AACAM;AACD,KAhBD;AAiBAD,OAAG,6CAAH,EAAkD,UAACC,IAAD,EAAU;AAC1D,UAAMC,uBAAeR,eAAf,IAAgCE,SAAS,4BAAzC,EAAuEO,MAAM,CAA7E,GAAN;AACA,UAAMC,OAAO;AACXC,eAAO,EADI;AAEXC,cAAM,CACJ,EAAEC,IAAI,CAAN,EAASC,UAAU,OAAnB,EAA4BC,OAAO,iBAAnC,EADI;AAFK,OAAb;AAMA,UAAMC,SAAS,qBAAWC,gBAAX,CAA4BP,IAA5B,EAAkCF,OAAlC,CAAf;AACAQ,aAAOE,MAAP,CAAcC,EAAd,CAAiBC,EAAjB,CAAoB,QAApB;AACAJ,aAAOb,KAAP,CAAae,MAAb,CAAoBG,KAApB,CAA0Bb,QAAQL,KAAlC;AACAa,aAAOZ,MAAP,CAAcc,MAAd,CAAqBG,KAArB,CAA2Bb,QAAQJ,MAAnC;AACAY,aAAOP,IAAP,CAAYS,MAAZ,CAAmBG,KAAnB,CAAyBb,QAAQC,IAAjC;AACAO,aAAOE,MAAP,CAAcI,IAAd,CAAmBC,QAAnB,CAA4B,MAA5B;AACAP,aAAOE,MAAP,CAAcI,IAAd,CAAmBC,QAAnB,CAA4B,UAA5B;AACAP,aAAOQ,IAAP,CAAYN,MAAZ,CAAmBG,KAAnB,CAA4Bb,QAAQP,OAApC;AACAe,aAAOS,QAAP,CAAgBP,MAAhB,CAAuBG,KAAvB,CAAgCb,QAAQP,OAAxC;AACAM;AACD,KAlBD;AAmBD,GArCD;AAsCD,CAvCD","file":"pagination.test.js","sourcesContent":["import Pagination from '../services/Pagination';\n\nconst mockRequestMeta = {\n  baseUrl: 'test/api/route/for/test',\n  qString: 'search=test&state=1&page=1',\n  limit: 1,\n  offset: 0,\n};\n\ndescribe('Test suite pagination service', () => {\n  describe('generate pagination for data', () => {\n    it('should return pagination with next page', (done) => {\n      const reqMeta = { ...mockRequestMeta, page: 1 };\n      const data = {\n        count: 50,\n        rows: [\n          { id: 1, username: 'walex', email: 'walex@yahoo.com' }\n        ]\n      };\n      const result = Pagination.createPagingData(data, reqMeta);\n      result.should.be.an('object');\n      result.limit.should.equal(reqMeta.limit);\n      result.offset.should.equal(reqMeta.offset);\n      result.page.should.equal(reqMeta.page);\n      result.should.have.property('next');\n      result.next.should.equal(`${reqMeta.baseUrl}?page=2&search=test&state=1`);\n      done();\n    });\n    it('should return pagination with previous page', (done) => {\n      const reqMeta = { ...mockRequestMeta, qString: 'search=test&state=1&page=3', page: 3 };\n      const data = {\n        count: 50,\n        rows: [\n          { id: 1, username: 'walex', email: 'walex@yahoo.com' }\n        ]\n      };\n      const result = Pagination.createPagingData(data, reqMeta);\n      result.should.be.an('object');\n      result.limit.should.equal(reqMeta.limit);\n      result.offset.should.equal(reqMeta.offset);\n      result.page.should.equal(reqMeta.page);\n      result.should.have.property('next');\n      result.should.have.property('previous');\n      result.next.should.equal(`${reqMeta.baseUrl}?page=4&search=test&state=1`);\n      result.previous.should.equal(`${reqMeta.baseUrl}?page=2&search=test&state=1`);\n      done();\n    });\n  });\n});\n"]}