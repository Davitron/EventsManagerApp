{"version":3,"sources":["../../../server/controllers/v1/UserController.js"],"names":["mailTemplate","load","Users","User","mailer","UserController","req","res","create","email","body","username","password","hashedPassword","then","user","host","protocol","get","token","sign","id","process","env","SECRET_KEY","message","messageBody","accountCreated","sendMail","userDetails","isAdmin","isVerified","status","json","statusCode","next","Op","findAll","where","or","users","length","confirmPassword","hashSync","findOne","compareSync","expiresIn","Token","decoded","update","catch","error","err","name","findAndCountAll","attributes","limit","meta","offset","rows","data","metaData","pagination","createPagingData","findById","params","userId","destroy","resetPassword"],"mappings":"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","file":"UserController.js","sourcesContent":["import Sequelize from 'sequelize';\nimport jwt from 'jsonwebtoken';\nimport dotenv from 'dotenv';\nimport bcrypt from 'bcrypt';\nimport model from '../../models';\nimport Mailer from '../../services/Mailer';\nimport * as mailTemplate from '../../config/mailTemplate';\nimport Pagination from '../../services/Pagination';\n\ndotenv.load();\nconst Users = model.User;\n\nconst mailer = new Mailer();\n\n/**\n * @exports\n *\n * @class\n *\n */\nexport default class UserController {\n  /**\n   * @memberOf UserController\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   *\n   * @return {json} returns ststus and message\n   */\n  static handleUserInsert(req, res) {\n    Users.create({\n      email: req.body.email,\n      username: req.body.username,\n      password: req.body.hashedPassword\n    })\n      .then((user) => {\n        const host = `${req.protocol}://${req.get('host')}`;\n        const token = jwt.sign({ id: user.id, email: user.email }, process.env.SECRET_KEY);\n        const message = mailTemplate.messageBody.accountCreated(user.username, token, host);\n        mailer.sendMail(user.email, message, 'Welcome to EventsManager');\n        const userDetails = {\n          username: user.username,\n          email: user.email,\n          isAdmin: user.isAdmin,\n          isVerified: user.isVerified\n        };\n        return res.status(201).json({\n          message: 'User registration successfull. An email has been sent for verification',\n          userDetails,\n          token,\n          statusCode: 201\n        });\n      });\n  }\n  /**\n   * @memberOf UserController\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @param {function} next - call the next function\n   *\n   * @return {json} returns ststus and message\n   */\n  static validateNewUser(req, res, next) {\n    const { Op } = Sequelize;\n    return Users.findAll({\n      where: {\n        [Op.or]: [{ email: req.body.email }, { username: req.body.username }]\n      }\n    }).then((users) => {\n      if (users.length > 0) {\n        res.status(409).json({ message: 'email or username already taken', statusCode: 409 });\n      } else if (req.body.password !== req.body.confirmPassword) {\n        return res.status(400).json({ message: 'Passwords do not match', statusCode: 400 });\n      } else {\n        req.body.hashedPassword = bcrypt.hashSync(req.body.password, 10);\n        next();\n      }\n    });\n  }\n\n  /**\n   *\n   * @memberof UserController\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @return {json} returns user object of authnticated user\n   */\n  static authenticate(req, res) {\n    return Users.findOne({\n      where: {\n        email: req.body.email\n      },\n    }).then((user) => {\n      if (!user) {\n        return res.status(401).json({ message: 'Invalid Login Credentials', statusCode: 401 });\n      }\n      if (!bcrypt.compareSync(req.body.password, user.password)) {\n        return res.status(401).json({ message: 'Invalid Login Credentials', statusCode: 401 });\n      }\n      if (!user.isVerified) {\n        return res.status(401).json({\n          message: 'Registration incomplete. Proceed to your mail to complete registration',\n          statusCode: 401\n        });\n      }\n      const token =\n      jwt.sign({\n        id: user.id,\n        isAdmin: user.isAdmin,\n        username: user.username,\n        email: user.email,\n        isVerified: user.isVerified\n      }, process.env.SECRET_KEY, { expiresIn: '1d' });\n\n      const userDetails = {\n        username: user.username,\n        email: user.email,\n        isAdmin: user.isAdmin,\n        isVerified: user.isVerified\n      };\n\n      res.status(200).json({\n        message: 'Authentication Is Successful!',\n        userDetails,\n        Token: token,\n        statusCode: 200\n      });\n    });\n  }\n\n  /**\n   * @memberof UserController\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @returns {object} complete user registration\n   */\n  static completeRegistration(req, res) {\n    return Users.findOne({\n      where: {\n        email: req.decoded.email\n      }\n    }).then((user) => {\n      if (user.isVerified === true) {\n        return res.status(409).json({ message: 'User is already verified', statusCode: 409 });\n      }\n      return user.update({\n        isVerified: true\n      }).then(() => res.status(200).json({\n        message: 'Welcome to Event Manager',\n        statusCode: 200\n      }));\n    }).catch(err => res.status(500).json({\n      message: 'Oops!, an error has occured',\n      error: err.name,\n      statusCode: 500\n    }));\n  }\n\n  /**\n   *\n   * @memberOf UserController\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @returns {json} returns all users\n   */\n  static getUsers(req, res) {\n    return Users.findAndCountAll({\n      attributes: ['id', 'username', 'email', 'isAdmin', 'isVerified'],\n      limit: req.meta.limit,\n      offset: req.meta.offset\n    })\n      .then((users) => {\n        if (users.rows < 1) {\n          res.status(400).json({\n            message: 'No Users Found',\n            data: null,\n            meta: null,\n            statusCode: 400,\n          });\n        }\n        res.status(200).json({\n          message: 'Users Retrieved',\n          data: users.rows,\n          metaData: {\n            pagination: Pagination.createPagingData(users, req.meta),\n          },\n          statusCode: 200\n        });\n      });\n  }\n\n\n  /**\n   *\n   * @memberOf UserController\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @returns {json} returns message object id deletion is successful\n   */\n  static delete(req, res) {\n    return Users.findById(req.params.userId)\n      .then((user) => {\n        if (!user) {\n          return res.status(404).json({\n            message: 'User does not exist',\n            statusCode: 404\n          });\n        }\n        user.destroy()\n          .then(() => res.status(200).json({ message: 'User is successfully  deleted', statusCode: 200 }));\n      });\n  }\n\n  /**\n   *\n   * @memberOf UserController\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @returns {json} returns message object id deletion is successful\n   */\n  static resetPasswordRequest(req, res) {\n    const host = `${req.protocol}://${req.get('host')}`;\n    return Users.findOne({\n      where: {\n        email: req.body.email\n      }\n    })\n      .then((user) => {\n        if (user) {\n          const token = jwt.sign({ id: user.id, email: user.email }, process.env.SECRET_KEY, { expiresIn: '15m' });\n          const message = mailTemplate.messageBody.resetPassword(user.username, token, host);\n          mailer.sendMail(user.email, message, 'Password Reset Link');\n          return res.status(200).json({ message: 'Password reset link is sent', statusCode: 200, token });\n        }\n        return res.status(404).json({ message: 'User does not exist', statusCode: 404 });\n      });\n  }\n\n  /**\n   * @memberOf UserController\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @returns {json} returns message object with status code\n   */\n  static resetPassword(req, res) {\n    if (req.body.password !== req.body.confirmPassword) {\n      return res.status(400).json({ message: 'Passwords do not match', statusCode: 400 });\n    }\n    return Users.findOne({\n      where: {\n        email: req.decoded.email\n      }\n    })\n      .then(user => user.update({ password: bcrypt.hashSync(req.body.password, 10) })\n        .then(() => {\n          res.status(200).json({ message: 'Password reset successful. You can proceed to Login', statusCode: 200 });\n        })\n        .catch(err => res.status(500).json({ message: 'Oops!, an error has occured', error: err.name, statusCode: 500 })));\n  }\n}\n"]}