{"version":3,"sources":["../../../server/controllers/v1/CenterController.js"],"names":["Centers","Center","Events","Event","States","State","Op","centerAtributes","dbInclude","model","required","as","attributes","User","CenterController","req","res","next","customQuery","query","defaultQuery","include","limit","meta","offset","order","Object","keys","length","search","or","name","ilike","fullAddress","state","stateId","facilities","contains","capacity","hallCapacity","gte","where","validateName","params","centerId","body","address","id","ne","parseInt","findAll","then","centers","status","json","message","statusCode","map","f","toLowerCase","create","carParkCapacity","image","createdBy","decoded","updatedBy","price","parseFloat","center","findAndCountAll","rows","data","metadata","pagination","createPagingData","currentCenter","update","admin","updatedCenter","findOne","count","pendingEvents","send","pendingEventCount","events","protocol","get","baseUrl","findById","destroy","states"],"mappings":";;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;;;;;AAEA,IAAMA,UAAU,iBAAMC,MAAtB;AACA,IAAMC,SAAS,iBAAMC,KAArB;AACA,IAAMC,SAAS,iBAAMC,KAArB;;IAEQC,E,uBAAAA,E;;;AAER,IAAMC,kBAAkB,CACtB,IADsB,EAEtB,MAFsB,EAGtB,SAHsB,EAItB,aAJsB,EAKtB,OALsB,EAMtB,cANsB,EAOtB,iBAPsB,EAQtB,OARsB,EAStB,OATsB,CAAxB;;AAYA,IAAMC,YAAY,CAChB;AACEC,SAAO,iBAAMJ,KADf;AAEEK,YAAU,IAFZ;AAGEC,MAAI,OAHN;AAIEC,cAAY,CAAC,WAAD;AAJd,CADgB,EAOhB;AACEH,SAAO,iBAAMI,IADf;AAEEH,YAAU,IAFZ;AAGEC,MAAI,MAHN;AAIEC,cAAY,CAAC,UAAD;AAJd,CAPgB,CAAlB;;AAeA;;;;;;;IAMqBE,gB;;;;;;;;AACnB;;;;;;;;;kCASqBC,G,EAAKC,G,EAAKC,I,EAAM;AACnC,UAAIC,cAAc,EAAlB;AACA,UAAIC,QAAQ,EAAZ;;AAEA,UAAMC,eAAe;AACnBR,8BACKL,eADL,CADmB;AAInBc,iBAASb,SAJU;AAKnBc,eAAOP,IAAIQ,IAAJ,CAASD,KALG;AAMnBE,gBAAQT,IAAIQ,IAAJ,CAASC,MANE;AAOnBC,eAAO,CAAC,CAAC,MAAD,CAAD;AAPY,OAArB;;AAUA,UAAIC,OAAOC,IAAP,CAAYZ,IAAII,KAAhB,EAAuBS,MAAvB,KAAkC,CAAtC,EAAyC;AACvCb,YAAIQ,IAAJ,CAASJ,KAAT,GAAiBC,YAAjB;AACA,eAAOH,MAAP;AACD;;AAED,UAAIF,IAAII,KAAJ,CAAUU,MAAd,EAAsB;AACpBV,oCACGb,GAAGwB,EADN,EACW,CACP,EAAEC,MAAM,EAAEC,aAAWjB,IAAII,KAAJ,CAAUU,MAArB,MAAF,EAAR,EADO,EAEP,EAAEI,aAAa,EAAED,aAAWjB,IAAII,KAAJ,CAAUU,MAArB,MAAF,EAAf,EAFO,CADX;AAMD;AACD,UAAId,IAAII,KAAJ,CAAUe,KAAd,EAAqBf,MAAMgB,OAAN,GAAgBpB,IAAII,KAAJ,CAAUe,KAA1B;AACrB,UAAInB,IAAII,KAAJ,CAAUiB,UAAd,EAA0BjB,MAAMiB,UAAN,uBAAsB9B,GAAG+B,QAAzB,EAAoCtB,IAAII,KAAJ,CAAUiB,UAA9C;AAC1B,UAAIrB,IAAII,KAAJ,CAAUmB,QAAd,EAAwBnB,MAAMoB,YAAN,uBAAwBjC,GAAGkC,GAA3B,EAAiCzB,IAAII,KAAJ,CAAUmB,QAA3C;;AAExBpB,+BAAgBuB,OAAOtB,KAAvB,IAAiCC,YAAjC;AACAL,UAAIQ,IAAJ,CAASJ,KAAT,GAAiBD,WAAjB;AACA,aAAOD,MAAP;AACD;;AAED;;;;;;;;;;;;;;;;;;uCAe0BF,G,EAAKC,G,EAAKC,I,EAAM;AACxC,UAAIE,cAAJ;AACA,UAAIJ,IAAI2B,YAAJ,KAAqB,KAAzB,EAAgC;AAC9B,YAAI3B,IAAI4B,MAAJ,CAAWC,QAAf,EAAyB;AACvBzB,kBAAQ;AACNY,kBAAMhB,IAAI8B,IAAJ,CAASd,IADT;AAENI,qBAASpB,IAAI8B,IAAJ,CAASV,OAFZ;AAGNW,qBAAS/B,IAAI8B,IAAJ,CAASC,OAHZ;AAINC,oCACG,oBAAUzC,EAAV,CAAa0C,EADhB,EACqBC,SAASlC,IAAI4B,MAAJ,CAAWC,QAApB,EAA8B,EAA9B,CADrB;AAJM,WAAR;AAQD,SATD,MASO;AACLzB,kBAAQ;AACNY,kBAAMhB,IAAI8B,IAAJ,CAASd,IADT;AAENe,qBAAS/B,IAAI8B,IAAJ,CAASC,OAFZ;AAGNX,qBAASpB,IAAI8B,IAAJ,CAASV;AAHZ,WAAR;AAKD;AACD,eAAOnC,QAAQkD,OAAR,CAAgB,EAAET,OAAOtB,KAAT,EAAhB,EACJgC,IADI,CACC,UAACC,OAAD,EAAa;AACjB,cAAIA,QAAQxB,MAAR,GAAiB,CAArB,EAAwB;AACtB,mBAAOZ,IAAIqC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,uBAAX,EAAoCC,YAAY,GAAhD,EAArB,CAAP;AACD;AACDvC;AACD,SANI,CAAP;AAOD;AACD,aAAOA,MAAP;AACD;;AAGD;;;;;;;;;;;;;;uCAW0BF,G,EAAKC,G,EAAK;AAClCD,UAAI8B,IAAJ,CAAST,UAAT,GAAsBrB,IAAI8B,IAAJ,CAAST,UAAT,CAAoBqB,GAApB,CAAwB;AAAA,eAAKC,EAAEC,WAAF,EAAL;AAAA,OAAxB,CAAtB;AACA3D,cAAQ4D,MAAR,CAAe;AACb7B,cAAMhB,IAAI8B,IAAJ,CAASd,IADF;AAEbI,iBAASc,SAASlC,IAAI8B,IAAJ,CAASV,OAAlB,EAA2B,EAA3B,CAFI;AAGbW,iBAAS/B,IAAI8B,IAAJ,CAASC,OAHL;AAIbb,qBAAalB,IAAI8B,IAAJ,CAASZ,WAJT;AAKbM,sBAAcU,SAASlC,IAAI8B,IAAJ,CAASN,YAAlB,EAAgC,EAAhC,CALD;AAMbsB,yBAAiBZ,SAASlC,IAAI8B,IAAJ,CAASgB,eAAlB,EAAmC,EAAnC,CANJ;AAObzB,oBAAYrB,IAAI8B,IAAJ,CAAST,UAPR;AAQb0B,eAAO/C,IAAI8B,IAAJ,CAASiB,KARH;AASbC,mBAAWd,SAASlC,IAAIiD,OAAJ,CAAYjB,EAArB,EAAyB,EAAzB,CATE;AAUbkB,mBAAWhB,SAASlC,IAAIiD,OAAJ,CAAYjB,EAArB,EAAyB,EAAzB,CAVE;AAWbmB,eAAOC,WAAWpD,IAAI8B,IAAJ,CAASqB,KAApB;AAXM,OAAf,EAaGf,IAbH,CAaQ,UAACiB,MAAD,EAAY;AAChBpD,YAAIqC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,oBAAX,EAAiCX,UAAUwB,OAAOrB,EAAlD,EAAsDS,YAAY,GAAlE,EAArB;AACD,OAfH;AAgBD;;AAED;;;;;;;;;;;iCAQoBzC,G,EAAKC,G,EAAK;AAC5B,aAAOhB,QAAQqE,eAAR,CAAwBtD,IAAIQ,IAAJ,CAASJ,KAAjC,EACJgC,IADI,CACC,UAACC,OAAD,EAAa;AACjB,YAAIA,QAAQkB,IAAR,CAAa1C,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,iBAAOZ,IAAIqC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,qBAAS,kBADiB;AAE1BC,wBAAY,GAFc;AAG1Be,kBAAM,EAHoB;AAI1BC,sBAAU;AAJgB,WAArB,CAAP;AAMD;AACD,eAAOxD,IAAIqC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,mBAAS,mBADiB;AAE1BgB,gBAAMnB,QAAQkB,IAFY;AAG1BE,oBAAU;AACRC,wBAAY,qBAAWC,gBAAX,CAA4BtB,OAA5B,EAAqCrC,IAAIQ,IAAzC;AADJ,WAHgB;AAM1BiC,sBAAY;AANc,SAArB,CAAP;AAQD,OAlBI,CAAP;AAmBD;;AAED;;;;;;;;;;;;;;uCAW0BzC,G,EAAKC,G,EAAK;AAClC,UAAMoD,SAASrD,IAAI4D,aAAnB;AACA,aAAOP,OAAOQ,MAAP,CAAc;AACnB7C,cAAMhB,IAAI8B,IAAJ,CAASd,IAAT,IAAiBqC,OAAOrC,IADX;AAEnBI,iBAASc,SAASlC,IAAI8B,IAAJ,CAASV,OAAlB,EAA2B,EAA3B,KAAkCiC,OAAOjC,OAF/B;AAGnBW,iBAAS/B,IAAI8B,IAAJ,CAASC,OAAT,IAAoBsB,OAAOtB,OAHjB;AAInBb,qBAAalB,IAAI8B,IAAJ,CAASZ,WAAT,IAAwBmC,OAAOnC,WAJzB;AAKnBM,sBAAcU,SAASlC,IAAI8B,IAAJ,CAASN,YAAlB,EAAgC,EAAhC,KAAuC6B,OAAO7B,YALzC;AAMnBsB,yBAAiBZ,SAASlC,IAAI8B,IAAJ,CAASgB,eAAlB,EAAmC,EAAnC,KACjBO,OAAOP,eAPY;AAQnBzB,oBAAYrB,IAAI8B,IAAJ,CAAST,UAAT,IAAuBgC,OAAOhC,UARvB;AASnB0B,eAAO/C,IAAI8B,IAAJ,CAASiB,KAAT,IAAkBM,OAAON,KATb;AAUnBG,mBAAWhB,SAASlC,IAAI8B,IAAJ,CAASgC,KAAlB,EAAyB,EAAzB,KAAgCT,OAAOH,SAV/B;AAWnBC,eAAOC,WAAWpD,IAAI8B,IAAJ,CAASqB,KAApB,KAA8BE,OAAOF;AAXzB,OAAd,EAaJf,IAbI,CAaC;AAAA,eAAiBnC,IAAIqC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1CC,mBAAS,0BADiC;AAE1CC,sBAAY,GAF8B;AAG1CsB;AAH0C,SAArB,CAAjB;AAAA,OAbD,CAAP;AAkBD;;AAGD;;;;;;;;;;;;;wBAUW/D,G,EAAKC,G,EAAK;AACnB,aAAOhB,QAAQ+E,OAAR,CAAgB;AACrBtC,eAAO;AACLM,cAAIhC,IAAI4B,MAAJ,CAAWC;AADV,SADc;AAIrBhC,8BACKL,eADL,GAEE,SAFF,EAGE,YAHF,EAIE,WAJF,EAJqB;AAUrBc,iBAASb;AAVY,OAAhB,EAYJ2C,IAZI,CAYC,UAACiB,MAAD,EAAY;AAChB,YAAI,CAACA,MAAL,EAAa;AACX,iBAAOpD,IAAIqC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,qBAAS,kBADiB;AAE1BC,wBAAY,GAFc,CAEV;AAFU,WAArB,CAAP;AAID;AACDtD,eAAO8E,KAAP,CAAa;AACXvC,iBAAO;AACLG,sBAAUwB,OAAOrB,EADZ;AAELM,oBAAQ;AAFH;AADI,SAAb,EAMGF,IANH,CAMQ,UAAC6B,KAAD,EAAW;AACf,cAAMC,gBAAgBD,KAAtB;AACA,iBAAOhE,IAAIqC,MAAJ,CAAW,GAAX,EAAgB6B,IAAhB,CAAqB;AAC1B3B,qBAAS,kBADiB;AAE1Ba,0BAF0B;AAG1BI,sBAAU;AACRW,iCAAmBF,aADX;AAERG,sBAAWrE,IAAIsE,QAAf,WAA6BtE,IAAIuE,GAAJ,CAAQ,MAAR,CAA7B,GAA+CvE,IAAIwE,OAAnD,yBAA8EnB,OAAOrB;AAF7E,aAHgB;AAO1BS,wBAAY;AAPc,WAArB,CAAP;AASD,SAjBH;AAkBD,OArCI,CAAP;AAsCD;;AAED;;;;;;;;;;;;;;;yCAY4BzC,G,EAAKC,G,EAAKC,I,EAAM;AAC1C,aAAOjB,QAAQ+E,OAAR,CAAgB;AACrBtC,eAAO;AACLM,cAAIhC,IAAI4B,MAAJ,CAAWC;AADV;AADc,OAAhB,EAKJO,IALI,CAKC,UAACiB,MAAD,EAAY;AAChB,YAAI,CAACA,MAAL,EAAa;AACX,iBAAOpD,IAAIqC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,qBAAS,uBADiB;AAE1BC,wBAAY;AAFc,WAArB,CAAP;AAID;AACD,YAAIzC,IAAI8B,IAAJ,CAAST,UAAb,EAAyB;AACvBrB,cAAI8B,IAAJ,CAAST,UAAT,GAAsBrB,IAAI8B,IAAJ,CAAST,UAAT,CAAoBqB,GAApB,CAAwB;AAAA,mBAAKC,EAAEC,WAAF,EAAL;AAAA,WAAxB,CAAtB;AACD;AACD,YAAI5C,IAAI8B,IAAJ,CAASd,IAAT,IAAiBqC,OAAOrC,IAAP,KAAgBhB,IAAI8B,IAAJ,CAASd,IAA9C,EAAoD;AAClDhB,cAAI4D,aAAJ,GAAoBP,MAApB;AACArD,cAAI2B,YAAJ,GAAmB,IAAnB;AACA,iBAAOzB,MAAP;AACD;AACDF,YAAI4D,aAAJ,GAAoBP,MAApB;AACArD,YAAI2B,YAAJ,GAAmB,KAAnB;AACAzB;AACD,OAvBI,CAAP;AAwBD;;AAED;;;;;;;;;;;;4BAScF,G,EAAKC,G,EAAK;AACtB,aAAOhB,QAAQwF,QAAR,CAAiBzE,IAAI4B,MAAJ,CAAWC,QAA5B,EACJO,IADI,CACC,UAACiB,MAAD,EAAY;AAChB,YAAI,CAACA,MAAL,EAAa;AACX,iBAAOpD,IAAIqC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,qBAAS,uBADiB;AAE1BC,wBAAY;AAFc,WAArB,CAAP;AAID;AACD,eAAOY,OAAOqB,OAAP,GACJtC,IADI,CACC;AAAA,iBAAMnC,IAAIqC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,gCAAX,EAA6CC,YAAY,GAAzD,EAArB,CAAN;AAAA,SADD,CAAP;AAED,OAVI,CAAP;AAWD;;AAED;;;;;;;;;;;;;;iCAWoBzC,G,EAAKC,G,EAAK;AAC5B,aAAOZ,OAAO8C,OAAP,CAAe,EAAE5B,OAAO,EAAT,EAAf,EACJ6B,IADI,CACC,UAACuC,MAAD,EAAY;AAChB,YAAIA,OAAO9D,MAAP,KAAkB,CAAtB,EAAyB;AACvB,iBAAOZ,IAAIqC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,qBAAS,kBADiB;AAE1BC,wBAAY;AAFc,WAArB,CAAP;AAID;AACD,eAAOxC,IAAIqC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,kBAAX,EAA+BmC,cAA/B,EAAuClC,YAAY,GAAnD,EAArB,CAAP;AACD,OATI,CAAP;AAUD;;;;;;kBAlUkB1C,gB","file":"CenterController.js","sourcesContent":["import Sequelize from 'sequelize';\nimport model from '../../models';\nimport Pagination from '../../services/Pagination';\n\nconst Centers = model.Center;\nconst Events = model.Event;\nconst States = model.State;\n\nconst { Op } = Sequelize;\n\nconst centerAtributes = [\n  'id',\n  'name',\n  'address',\n  'fullAddress',\n  'price',\n  'hallCapacity',\n  'carParkCapacity',\n  'image',\n  'price'\n];\n\nconst dbInclude = [\n  {\n    model: model.State,\n    required: true,\n    as: 'state',\n    attributes: ['stateName']\n  },\n  {\n    model: model.User,\n    required: true,\n    as: 'user',\n    attributes: ['username']\n  },\n];\n\n/**\n * @export\n *\n * @class CenterController\n *\n */\nexport default class CenterController {\n  /**\n   *\n   * @param {object} req - HTTP request object\n   * @param {object} res - HTTP response object\n   * @param {function} next - call next function\n   * @returns {next}\n   *\n   * generates a query and passes it into the next function\n   */\n  static generateQuery(req, res, next) {\n    let customQuery = {};\n    let query = {};\n\n    const defaultQuery = {\n      attributes: [\n        ...centerAtributes,\n      ],\n      include: dbInclude,\n      limit: req.meta.limit,\n      offset: req.meta.offset,\n      order: [['name']]\n    };\n\n    if (Object.keys(req.query).length === 0) {\n      req.meta.query = defaultQuery;\n      return next();\n    }\n\n    if (req.query.search) {\n      query = {\n        [Op.or]: [\n          { name: { ilike: `%${req.query.search}%` } },\n          { fullAddress: { ilike: `%${req.query.search}%` } }\n        ]\n      };\n    }\n    if (req.query.state) query.stateId = req.query.state;\n    if (req.query.facilities) query.facilities = { [Op.contains]: req.query.facilities };\n    if (req.query.capacity) query.hallCapacity = { [Op.gte]: req.query.capacity };\n\n    customQuery = { where: query, ...defaultQuery };\n    req.meta.query = customQuery;\n    return next();\n  }\n\n  /**\n   * Check if Center already exists\n   *\n   * @memberOf {CenterController}\n   *\n   * @param {object} req - HTTP request Object\n   *\n   * @param {object} res - HTTP response Object\n   *\n   * @param {object} next - call next function\n   *\n   * @return {object|next} - JSON response if center exists or null if otherwise\n   *\n   * @memberof CenterController\n   */\n  static validateCenterName(req, res, next) {\n    let query;\n    if (req.validateName !== false) {\n      if (req.params.centerId) {\n        query = {\n          name: req.body.name,\n          stateId: req.body.stateId,\n          address: req.body.address,\n          id: {\n            [Sequelize.Op.ne]: parseInt(req.params.centerId, 10)\n          }\n        };\n      } else {\n        query = {\n          name: req.body.name,\n          address: req.body.address,\n          stateId: req.body.stateId\n        };\n      }\n      return Centers.findAll({ where: query })\n        .then((centers) => {\n          if (centers.length > 0) {\n            return res.status(409).json({ message: 'Center already exists', statusCode: 409 });\n          }\n          next();\n        });\n    }\n    return next();\n  }\n\n\n  /**\n   * Insert new center into database\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @returns {CenterInsertResponse} - JSON response\n   *\n   * @memberof CenterController\n   */\n  static handleCenterInsert(req, res) {\n    req.body.facilities = req.body.facilities.map(f => f.toLowerCase());\n    Centers.create({\n      name: req.body.name,\n      stateId: parseInt(req.body.stateId, 10),\n      address: req.body.address,\n      fullAddress: req.body.fullAddress,\n      hallCapacity: parseInt(req.body.hallCapacity, 10),\n      carParkCapacity: parseInt(req.body.carParkCapacity, 10),\n      facilities: req.body.facilities,\n      image: req.body.image,\n      createdBy: parseInt(req.decoded.id, 10),\n      updatedBy: parseInt(req.decoded.id, 10),\n      price: parseFloat(req.body.price)\n    })\n      .then((center) => {\n        res.status(201).json({ message: 'New Center Created', centerId: center.id, statusCode: 201 });\n      });\n  }\n\n  /**\n   *\n   * @param {object} req\n   *\n   * @param {object} res\n   *\n   * @return {object} The list of all centers\n   */\n  static handleGetAll(req, res) {\n    return Centers.findAndCountAll(req.meta.query)\n      .then((centers) => {\n        if (centers.rows.length === 0) {\n          return res.status(404).json({\n            message: 'No centers found',\n            statusCode: 404,\n            data: [],\n            metadata: null,\n          });\n        }\n        return res.status(200).json({\n          message: 'Centers Retrieved',\n          data: centers.rows,\n          metadata: {\n            pagination: Pagination.createPagingData(centers, req.meta),\n          },\n          statusCode: 200\n        });\n      });\n  }\n\n  /**\n   *\n   *\n   * @param {object} req - HTTP request body\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @returns {CenterUpdateResponse} - JSON response\n   *\n   * @memberof CenterController\n   */\n  static handleCenterUpdate(req, res) {\n    const center = req.currentCenter;\n    return center.update({\n      name: req.body.name || center.name,\n      stateId: parseInt(req.body.stateId, 10) || center.stateId,\n      address: req.body.address || center.address,\n      fullAddress: req.body.fullAddress || center.fullAddress,\n      hallCapacity: parseInt(req.body.hallCapacity, 10) || center.hallCapacity,\n      carParkCapacity: parseInt(req.body.carParkCapacity, 10) ||\n      center.carParkCapacity,\n      facilities: req.body.facilities || center.facilities,\n      image: req.body.image || center.image,\n      updatedBy: parseInt(req.body.admin, 10) || center.updatedBy,\n      price: parseFloat(req.body.price) || center.price\n    })\n      .then(updatedCenter => res.status(200).json({\n        message: 'Center update successful',\n        statusCode: 200,\n        updatedCenter\n      }));\n  }\n\n\n  /**\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @returns {object} The requested center object\n   *\n   * @memberof CenterController\n   */\n  static get(req, res) {\n    return Centers.findOne({\n      where: {\n        id: req.params.centerId\n      },\n      attributes: [\n        ...centerAtributes,\n        'stateId',\n        'facilities',\n        'createdBy',\n      ],\n      include: dbInclude\n    })\n      .then((center) => {\n        if (!center) {\n          return res.status(404).json({\n            message: 'Center Not Found',\n            statusCode: 404 // return this when center is not present\n          });\n        }\n        Events.count({\n          where: {\n            centerId: center.id,\n            status: 'pending'\n          },\n        })\n          .then((count) => {\n            const pendingEvents = count;\n            return res.status(200).send({\n              message: 'Center Retrieved',\n              center,\n              metadata: {\n                pendingEventCount: pendingEvents,\n                events: `${req.protocol}://${req.get('host')}${req.baseUrl}/events?centerId=${center.id}`\n              },\n              statusCode: 200\n            });\n          });\n      });\n  }\n\n  /**\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP request object\n   *\n   * @param {object} next - call next function\n   *\n   * @returns {json} Object with properties message and statusCode\n   *\n   * @memberof CenterController\n   */\n  static fetchCenterforUpdate(req, res, next) {\n    return Centers.findOne({\n      where: {\n        id: req.params.centerId\n      }\n    })\n      .then((center) => {\n        if (!center) {\n          return res.status(404).json({\n            message: 'center does not exist',\n            statusCode: 404\n          });\n        }\n        if (req.body.facilities) {\n          req.body.facilities = req.body.facilities.map(f => f.toLowerCase());\n        }\n        if (req.body.name && center.name !== req.body.name) {\n          req.currentCenter = center;\n          req.validateName = true;\n          return next();\n        }\n        req.currentCenter = center;\n        req.validateName = false;\n        next();\n      });\n  }\n\n  /**\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @returns {object} - JSON object if deletion is successful\n   *\n   * @memberof CenterController\n   */\n  static delete(req, res) {\n    return Centers.findById(req.params.centerId)\n      .then((center) => {\n        if (!center) {\n          return res.status(404).json({\n            message: 'Center does not exist',\n            statusCode: 404\n          });\n        }\n        return center.destroy()\n          .then(() => res.status(200).json({ message: 'Center is successfully deleted', statusCode: 200 }));\n      });\n  }\n\n  /**\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @returns {object} - List of states\n   *\n   * @memberof CenterController\n   *\n   */\n  static getAllStates(req, res) {\n    return States.findAll({ limit: 37 })\n      .then((states) => {\n        if (states.length === 0) {\n          return res.status(404).json({\n            message: 'States Not Found',\n            statusCode: 404\n          });\n        }\n        return res.status(200).json({ message: 'States Retrieved', states, statusCode: 200 });\n      });\n  }\n}\n"]}