{"version":3,"sources":["../../../server/controllers/v1/EventController.js"],"names":["mailTemplate","Events","Event","Centers","Center","mailer","EventController","req","res","next","processDate","body","startDate","Date","endDate","add","days","toDate","now","status","json","message","statusCode","query","defaultQuery","centerId","Op","or","between","lte","gte","params","eventId","id","ne","parseInt","findOne","where","then","available","center","create","eventName","userId","decoded","image","createdEvent","messageBody","eventCreated","username","sendMail","email","send","event","currentEvent","update","modifiedEvent","meta","DBQuery","limit","offset","findAndCountAll","attributes","include","model","as","order","events","rows","data","metadata","pagination","createPagingData","statDate","destroy","User","eventApproved","eventRejected","title","user","name"],"mappings":"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","file":"EventController.js","sourcesContent":["import moment from 'moment';\nimport Sequelize from 'sequelize';\nimport model from '../../models';\nimport * as mailTemplate from '../../config/mailTemplate';\nimport Mailer from '../../services/Mailer';\nimport Pagination from '../../services/Pagination';\n\n\nconst Events = model.Event;\nconst Centers = model.Center;\n\nconst mailer = new Mailer();\n\n/**\n * @exports\n *\n * @class\n */\nexport default class EventController {\n  /**\n   * @memberof EventController\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @param {function} next - call to the next function\n   *\n   * @returns {object|next} Procces and validate date\n   */\n  static processDates(req, res, next) {\n    if (req.processDate !== false) {\n      req.body.startDate = new Date(req.body.startDate);\n      req.body.endDate = moment(req.body.startDate).add(req.body.days - 1, 'days').toDate();\n      const now = new Date();\n      if (req.body.startDate < now) {\n        return res.status(400).json({\n          message: 'Date must be in the future',\n          statusCode: 400\n        });\n      }\n      return next();\n    }\n    next();\n  }\n\n  /**\n   * @memberof EventController\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @param {function} next - call the next function\n   *\n   * @returns {object|next}\n   *\n   * returns null if selected date is free\n   * or JSON response if date is booked\n   */\n  static checkDateAvailabity(req, res, next) {\n    let query;\n    const defaultQuery = {\n      centerId: req.body.centerId,\n      [Sequelize.Op.or]: [\n        {\n          startDate: { [Sequelize.Op.between]: [req.body.startDate, req.body.endDate] }\n        }, {\n          endDate: {\n            [Sequelize.Op.between]: [req.body.startDate, req.body.endDate]\n          }\n        }, {\n          startDate: {\n            [Sequelize.Op.lte]: req.body.startDate\n          },\n          endDate: {\n            [Sequelize.Op.gte]: req.body.endDate\n          }\n        }\n      ]\n    };\n\n    if (req.params.eventId) {\n      query = {\n        ...defaultQuery,\n        id: { [Sequelize.Op.ne]: parseInt(req.params.eventId, 10) }\n      };\n    } else {\n      query = { ...defaultQuery };\n    }\n    return Events.findOne({ where: query })\n      .then((available) => {\n        if (available) {\n          return res.status(400).json({\n            message: 'The selected date is booked',\n            center: available,\n            statusCode: 400\n          });\n        }\n        return next();\n      });\n  }\n\n  /**\n   *\n   * @memberof EventController\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @returns {object} - JSON resonse\n   *\n   * Inserts new event into Events table\n   */\n  static handleEventInsert(req, res) {\n    return Events.create({\n      eventName: req.body.eventName,\n      centerId: parseInt(req.body.centerId, 10),\n      startDate: req.body.startDate,\n      days: req.body.days,\n      endDate: req.body.endDate,\n      userId: req.decoded.id,\n      image: req.body.image,\n    })\n      .then((createdEvent) => {\n        const message = mailTemplate.messageBody.eventCreated(req.decoded.username);\n        mailer.sendMail(req.decoded.email, message, 'New Event Created');\n        return res.status(201).send({\n          message: `${createdEvent.eventName} event Created Successfully`,\n          createdEvent,\n          statusCode: 201\n        });\n      });\n  }\n\n  /**\n   * @memberof EventController\n   *\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @returns {object} - the created center\n   */\n  static handleEventUpdate(req, res) {\n    const event = req.currentEvent;\n    return event.update({\n      eventName: req.body.eventName || event.eventName,\n      centerId: req.body.centerId || event.centerId,\n      startDate: req.body.startDate || event.startDate,\n      days: req.body.days || event.days,\n      endDate: req.body.endDate || event.endDate,\n      image: req.body.image || event.image,\n      status: req.body.status || event.status\n    })\n      .then(modifiedEvent => res.status(200).json({\n        message: 'Event Updated Successfully',\n        modifiedEvent,\n        statusCode: 200\n      }));\n  }\n\n  /**\n   * @memberof EventController\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @param {function} next - call to the next function\n   *\n   * @returns {object|next} Procces and validate date\n   */\n  static generateQuery(req, res, next) {\n    if (req.query.status) req.meta.DBQuery.status = req.query.status;\n\n    if (req.query.centerId) req.meta.DBQuery.centerId = req.query.centerId;\n\n    if (!req.query.status && !req.query.centerId && req.decoded.id) {\n      req.meta.DBQuery = { userId: req.decoded.id };\n    }\n    // req.meta = reqMeta;\n    next();\n  }\n\n  /**\n   * @memberOf EventController\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @returns {object} - JSON resonse containing a list of all events\n   */\n  static handleGetAll(req, res) {\n    const { limit, offset, DBQuery } = req.meta;\n    return Events.findAndCountAll({\n      where: DBQuery,\n      attributes: [\n        'id',\n        'days',\n        'eventName',\n        'startDate',\n        'endDate',\n        'image',\n        'status',\n        'centerId',\n      ],\n      include: [{ model: Centers, as: 'center', attributes: ['name'] }],\n      limit,\n      offset,\n      order: [['updatedAt', 'DESC']]\n    }).then((events) => {\n      if (events.rows < 1) {\n        return res.status(200).json({\n          message: 'No Events Available',\n          data: [],\n          metadata: {},\n          statusCode: 200\n        });\n      }\n      return res.status(200).json({\n        message: 'Events Retrieved',\n        data: events.rows,\n        metadata: {\n          pagination: Pagination.createPagingData(events, req.meta),\n        },\n        statusCode: 200\n      });\n    });\n  }\n\n  /**\n   * @memberOf EventController\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @returns {json} returns an event with Id provided\n   */\n  static getSingleEvent(req, res) {\n    return Events.findOne({\n      where: { id: req.params.eventId, userId: req.decoded.id },\n      attributes: ['id', 'days', 'eventName', 'startDate', 'days', 'endDate', 'centerId', 'image', 'status']\n    })\n      .then((event) => {\n        if (!event) {\n          return res.status(404).json({ message: 'Event Not Found', statusCode: 404 });\n        }\n        return res.status(200).json({ message: 'Event Retrieved', event, statusCode: 200 });\n      });\n  }\n\n  /**\n   * @memberof EventController\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @param {function} next - HTTP response object\n   *\n   * @returns {object} - JSON response\n   */\n  static fetchEventForUpdate(req, res, next) {\n    return Events.findOne({\n      where: {\n        id: req.params.eventId,\n        userId: req.decoded.id\n      }\n    })\n      .then((event) => {\n        if (event === null) {\n          return res.status(404).json({ message: 'Event not found', statusCode: 404 });\n        }\n        if (req.body.startDate && new Date(req.body.statDate) !== event.startDate) {\n          req.currentEvent = event;\n          req.processDate = true;\n          return next();\n        }\n        req.currentEvent = event;\n        req.processDate = false;\n        return next();\n      });\n  }\n\n  /**\n   * @memberOf EventController\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @returns {json} returns message object if event is deleted successfully\n   */\n  static delete(req, res) {\n    return Events.findOne({\n      where: {\n        id: req.params.eventId,\n        userId: req.decoded.id\n      }\n    })\n      .then((event) => {\n        if (!event) {\n          return res.status(404).json({ message: 'Event does not exist', statusCode: 404 });\n        }\n        return event.destroy()\n          .then(() => res.status(200).send({ message: 'Event is successfully  deleted', statusCode: 200 }));\n      });\n  }\n\n  /**\n   * @memberof EventController\n   *\n   * @param {object} req - HTTP request object\n   *\n   * @param {object} res - HTTP response object\n   *\n   * @returns {object} all upcoming events in a center\n   */\n  static respondToEvent(req, res) {\n    return Events.findOne({\n      where: { id: req.body.id },\n      include: [\n        { model: model.Center, as: 'center', attributes: ['name'] },\n        { model: model.User, as: 'user', attributes: ['email', 'username'] }\n      ]\n    })\n      .then((event) => {\n        if (!event) {\n          return res.status(404).json({ message: 'Event not found', statusCode: 200 });\n        }\n        event.update({ status: req.body.status })\n          .then(({ status }) => {\n            const { eventApproved, eventRejected } = mailTemplate.messageBody;\n            let message;\n            let title;\n            if (status === 'accepted') {\n              title = 'Event Approved';\n              message = eventApproved(event.user.username, event.center.name, event.startDate);\n            } else {\n              title = 'Event Declined';\n              message = eventRejected(event.user.username, event.center.name, event.startDate);\n            }\n            mailer.sendMail(event.user.email, message, title);\n            return res.status(200).json({ event, message: title, statusCode: 200 });\n          });\n      });\n  }\n}\n\n"]}