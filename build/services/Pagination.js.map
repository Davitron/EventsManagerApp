{"version":3,"sources":["../../server/services/Pagination.js"],"names":["Pagination","requestMeta","rows","count","baseUrl","qString","limit","offset","page","pages","Math","ceil","pagingData","currentPageSize","length","qs","parse","parseInt","previous","stringify","next"],"mappings":";;;;;;;;AAAA;;;;;;;;AAEA;;;;;IAKqBA,U;;;;;;;;AACnB;;;;;;;;;;;;2CAYyCC,W,EAAa;AAAA,UAA5BC,IAA4B,QAA5BA,IAA4B;AAAA,UAAtBC,KAAsB,QAAtBA,KAAsB;AAAA,UAElDC,OAFkD,GAOhDH,WAPgD,CAElDG,OAFkD;AAAA,UAGlDC,OAHkD,GAOhDJ,WAPgD,CAGlDI,OAHkD;AAAA,UAIlDC,KAJkD,GAOhDL,WAPgD,CAIlDK,KAJkD;AAAA,UAKlDC,MALkD,GAOhDN,WAPgD,CAKlDM,MALkD;AAAA,UAMlDC,IANkD,GAOhDP,WAPgD,CAMlDO,IANkD;;;AASpD,UAAMC,QAAQC,KAAKC,IAAL,CAAUR,QAAQG,KAAlB,CAAd;AACA,UAAMM,aAAa;AACjBN,oBADiB;AAEjBC,sBAFiB;AAGjBC,kBAHiB;AAIjBC,oBAJiB;AAKjBN,oBALiB;AAMjBU,yBAAiBX,KAAKY;AANL,OAAnB;;AAUA,UAAIN,SAAS,CAAb,EAAgB;AACd,YAAMO,KAAK,sBAAYC,KAAZ,CAAkBX,OAAlB,CAAX;AACAU,WAAGP,IAAH,GAAUS,SAASF,GAAGP,IAAZ,EAAkB,EAAlB,IAAwB,CAAlC;AACAI,mBAAWM,QAAX,GAAyBd,OAAzB,SAAoC,sBAAYe,SAAZ,CAAsBJ,EAAtB,CAApC;AACD;;AAED,UAAIN,QAAQD,IAAZ,EAAkB;AAChB,YAAMO,MAAK,sBAAYC,KAAZ,CAAkBX,OAAlB,CAAX;AACAU,YAAGP,IAAH,GAAUS,SAASF,IAAGP,IAAZ,EAAkB,EAAlB,IAAwB,CAAlC;AACAI,mBAAWQ,IAAX,GAAqBhB,OAArB,SAAgC,sBAAYe,SAAZ,CAAsBJ,GAAtB,CAAhC;AACD;AACD,aAAOH,UAAP;AACD;;;;;;kBA7CkBZ,U","file":"Pagination.js","sourcesContent":["import queryString from 'query-string';\n\n/**\n * @class\n *\n * @exports\n*/\nexport default class Pagination {\n  /**\n   *\n   * @param {object} param0\n   *\n   * @param {array} param0.rows\n   *\n   * @param {number} param0.count\n   *\n   * @param {object} requestMeta\n   *\n   * @returns {object} meta data for pagination\n   */\n  static createPagingData({ rows, count }, requestMeta) {\n    const {\n      baseUrl,\n      qString,\n      limit,\n      offset,\n      page,\n    } = requestMeta;\n\n    const pages = Math.ceil(count / limit);\n    const pagingData = {\n      limit,\n      offset,\n      page,\n      pages,\n      count,\n      currentPageSize: rows.length\n    };\n\n\n    if (page !== 1) {\n      const qs = queryString.parse(qString);\n      qs.page = parseInt(qs.page, 10) - 1;\n      pagingData.previous = `${baseUrl}?${queryString.stringify(qs)}`;\n    }\n\n    if (pages > page) {\n      const qs = queryString.parse(qString);\n      qs.page = parseInt(qs.page, 10) + 1;\n      pagingData.next = `${baseUrl}?${queryString.stringify(qs)}`;\n    }\n    return pagingData;\n  }\n}\n"]}