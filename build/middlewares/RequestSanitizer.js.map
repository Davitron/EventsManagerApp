{"version":3,"sources":["../../server/middlewares/RequestSanitizer.js"],"names":["RequestSanitizer","req","res","next","decoded","isAdmin","status","json","message","statusCode","body","facilities","Array","isArray","split","validation","validatonRule","passes","errors","param","isNaN","key","Object","keys","params","id","name","query","limit","parseInt","offset","page","reqMeta","baseUrl","protocol","get","path","qString","stringify","DBQuery","meta","newCenter","updateCenter","newEvent","updateEvent","eventNewStatus","newUser","authUser","resetPasswordRequest","passwordReset","States","State","address","currentCenter","stateId","setFullAddress","_address","stateName","findOne","where","then","state","fullAddress"],"mappings":"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","file":"RequestSanitizer.js","sourcesContent":["import validator from 'validatorjs';\nimport queryString from 'query-string';\nimport validatonRules from './validatonRules';\nimport model from '../models';\n\n/**\n * @class\n */\nclass RequestSanitizer {\n  /**\n   * Check user role\n   * @param {object} req - HTTP request object\n   * @param {object} res - HTTP response object\n   * @param {function} next - call next function\n   * @returns {object|next}\n   * moves to the next function if the user is an admin\n   * returns if an error occurs\n   */\n  static checkIfAdmin(req, res, next) {\n    if (req.decoded.isAdmin) {\n      next();\n    } else {\n      return res.status(401).json({ message: 'This user is not an administrator', statusCode: 401 });\n    }\n  }\n\n  /**\n   *\n   * @param {object} req - HTTP request object\n   * @param {object} res - HTTP response object\n   * @param {function} next - call next function\n   * @returns {object|next}\n   * moves to the next function if the user is an admin\n   * returns if an error occurs\n   */\n  static handleValidation(req, res, next) {\n    // temporary hack for swagger bug\n    if (req.body.facilities && !Array.isArray(req.body.facilities)) {\n      req.body.facilities = req.body.facilities.split(',');\n    }\n    const validation = new validator(req.body, req.validatonRule);\n    if (validation.passes()) {\n      next();\n    } else {\n      return res.status(400).json({ message: validation.errors, statusCode: 400 });\n    }\n  }\n\n  /**\n   *\n   * @param {number} param\n   * @returns {boolean} to determine id param id is valid\n   */\n  static validateRouteQuery(param) {\n    if (param && (isNaN(param) || param < 0)) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\n   *\n   * @param {object} req - HTTP request object\n   * @param {object} res - HTTP response object\n   * @param {function} next - call next function\n   * @returns {object|next}\n   * to validate req.params\n   */\n  static validateParameters(req, res, next) {\n    const key = Object.keys(req.params)[0];\n    const id = req.params[key];\n    const name = key;\n    if (id && isNaN(id)) {\n      return res.status(400).json({ message: `Invalid ${name}`, statusCode: 400 });\n    }\n    next();\n  }\n\n\n  /**\n   *\n   * @param {object} req - HTTP request object\n   * @param {object} res - HTTP response object\n   * @param {function} next - call next function\n   * @returns {object|next}\n   * moves to the next function if the user is an admin\n   * returns if an error occurs\n   */\n  static sanitizeQuery(req, res, next) {\n    for (const key in req.query) {\n      if (key === 'state' || key === 'capacity') {\n        if (isNaN(req.query[key]) || req.query[key] < 0) {\n          return res.status(400).json({ message: 'Invalid Request', statusCode: 400 });\n        }\n      }\n    }\n    next();\n  }\n\n  /**\n   *\n   * @param {object} req - HTTP request object\n   * @param {object} res - HTTP response object\n   * @param {function} next - call next function\n   * @returns {object|next}\n   * moves to the next function if the user is an admin\n   * returns if an error occurs\n   */\n  static prepareGetAllRequest(req, res, next) {\n    const limit = parseInt(req.query.limit, 10) || 12;\n    let offset = 0;\n    const page = parseInt(req.query.page, 10) || 1;\n    offset = limit * (page - 1);\n\n    const reqMeta = {\n      baseUrl: `${req.protocol}://${req.get('host')}${req.baseUrl}${req.path}`,\n      qString: queryString.stringify(req.query) || queryString.stringify({ limit, page }),\n      limit,\n      page,\n      offset,\n      DBQuery: {}\n    };\n    req.meta = reqMeta;\n    next();\n  }\n\n  /**\n   * Check user role\n   * @param {object} req - HTTP request object\n   * @param {object} res - HTTP response object\n   * @param {function} next - call next function\n   * @returns {void}\n   * append the validation rule to request object\n   *\n   */\n  static newCenterPreValidation(req, res, next) {\n    req.validatonRule = validatonRules.newCenter;\n    next();\n  }\n\n  /**\n   * Check user role\n   * @param {object} req - HTTP request object\n   * @param {object} res - HTTP response object\n   * @param {function} next - call next function\n   * @returns {void}\n   * append the validation rule to request object\n   *\n   */\n  static updateCenterPreValidation(req, res, next) {\n    req.validatonRule = validatonRules.updateCenter;\n    next();\n  }\n\n  /**\n   * Check user role\n   * @param {object} req - HTTP request object\n   * @param {object} res - HTTP response object\n   * @param {function} next - call next function\n   * @returns {void}\n   * append the validation rule to request object\n   *\n   */\n  static newEventPreValidation(req, res, next) {\n    req.validatonRule = validatonRules.newEvent;\n    next();\n  }\n\n  /**\n   * Check user role\n   * @param {object} req - HTTP request object\n   * @param {object} res - HTTP response object\n   * @param {function} next - call next function\n   * @returns {void}\n   * append the validation rule to request object\n   *\n   */\n  static updateEventPreValidation(req, res, next) {\n    req.validatonRule = validatonRules.updateEvent;\n    next();\n  }\n\n  /**\n   * Check user role\n   * @param {object} req - HTTP request object\n   * @param {object} res - HTTP response object\n   * @param {function} next - call next function\n   * @returns {void}\n   * append the validation rule to request object\n   *\n   */\n  static eventStatusPreValidation(req, res, next) {\n    req.validatonRule = validatonRules.eventNewStatus;\n    next();\n  }\n\n  /**\n   * Check user role\n   * @param {object} req - HTTP request object\n   * @param {object} res - HTTP response object\n   * @param {function} next - call next function\n   * @returns {void}\n   * append the validation rule to request object\n   *\n   */\n  static newUserPreValidation(req, res, next) {\n    req.validatonRule = validatonRules.newUser;\n    next();\n  }\n\n  /**\n   * Check user role\n   * @param {object} req - HTTP request object\n   * @param {object} res - HTTP response object\n   * @param {function} next - call next function\n   * @returns {void}\n   * append the validation rule to request object\n   *\n   */\n  static authUserPreValidation(req, res, next) {\n    req.validatonRule = validatonRules.authUser;\n    next();\n  }\n\n  /**\n   * Check user role\n   * @param {object} req - HTTP request object\n   * @param {object} res - HTTP response object\n   * @param {function} next - call next function\n   * @returns {void}\n   * append the validation rule to request object\n   *\n   */\n  static resetRequestPreValidation(req, res, next) {\n    req.validatonRule = validatonRules.resetPasswordRequest;\n    next();\n  }\n\n  /**\n   * Check user role\n   * @param {object} req - HTTP request object\n   * @param {object} res - HTTP response object\n   * @param {function} next - call next function\n   * @returns {void}\n   * append the validation rule to request object\n   *\n   */\n  static passwordRequestPreValidation(req, res, next) {\n    req.validatonRule = validatonRules.passwordReset;\n    next();\n  }\n\n  /**\n   * Check user role\n   * @param {object} req - HTTP request object\n   * @param {object} res - HTTP response object\n   * @param {function} next - call next function\n   * @returns {void}\n   * append the validation rule to request object\n   *\n   */\n  static completeCenterAddress(req, res, next) {\n    const States = model.State;\n\n    const address = req.body.address || req.currentCenter.address;\n    const stateId = req.body.stateId || req.currentCenter.stateId;\n\n    const setFullAddress = (_address, stateName) => `${_address}, ${stateName}`;\n    States.findOne({ where: { id: stateId } })\n      .then((state) => {\n        req.body.fullAddress = setFullAddress(address, state.stateName);\n        next();\n      });\n  }\n}\n\nexport default RequestSanitizer;\n"]}