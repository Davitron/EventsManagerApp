{"version":3,"sources":["../../server/middlewares/Security.js"],"names":["Users","User","Security","req","res","next","token","body","query","headers","verify","process","env","SECRET_KEY","err","resolved","status","json","message","statusCode","findOne","where","id","then","user","decoded"],"mappings":";;;;;;;;AAAA;;;;AACA;;;;;;;;AAEA,IAAMA,QAAQ,iBAAMC,IAApB;AACA;;;;IAGqBC,Q;;;;;;;;AACnB;;;;;;;;;0BASaC,G,EAAKC,G,EAAKC,I,EAAM;AAC3B,UAAMC,QAAQH,IAAII,IAAJ,CAASD,KAAT,IAAkBH,IAAIK,KAAJ,CAAUF,KAA5B,IAAqCH,IAAIM,OAAJ,CAAY,gBAAZ,CAAnD;AACA,UAAIH,KAAJ,EAAW;AACT,+BAAII,MAAJ,CAAWJ,KAAX,EAAkBK,QAAQC,GAAR,CAAYC,UAA9B,EAA0C,UAACC,GAAD,EAAMC,QAAN,EAAmB;AAC3D,cAAID,GAAJ,EAAS;AACP,mBAAOV,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,6BAAX,EAA0CC,YAAY,GAAtD,EAArB,CAAP;AACD;AACDnB,gBAAMoB,OAAN,CAAc;AACZC,mBAAO;AACLC,kBAAIP,SAASO;AADR;AADK,WAAd,EAKGC,IALH,CAKQ,UAACC,IAAD,EAAU;AACd,gBAAIA,IAAJ,EAAU;AACRrB,kBAAIsB,OAAJ,GAAcV,QAAd;AACA,qBAAOV,MAAP;AACD;AACD,mBAAOD,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,gBAAX,EAA6BC,YAAY,GAAzC,EAArB,CAAP;AACD,WAXH;AAYD,SAhBD;AAiBD,OAlBD,MAkBO;AACL,eAAOf,IAAIY,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,uBAAX,EAAoCC,YAAY,GAAhD,EAArB,CAAP;AACD;AACF;;;;;;kBAjCkBjB,Q","file":"Security.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport model from '../models';\n\nconst Users = model.User;\n/**\n *\n */\nexport default class Security {\n  /**\n   *\n   * @param {object} req - HTTP request object\n   * @param {object} res - HTTP request object\n   * @param {function} next - To call the next rout function\n   * @returns {object|next} moves to callback function if token is provided\n   * or send an error message if otherwise\n   *\n   */\n  static check(req, res, next) {\n    const token = req.body.token || req.query.token || req.headers['x-access-token'];\n    if (token) {\n      jwt.verify(token, process.env.SECRET_KEY, (err, resolved) => {\n        if (err) {\n          return res.status(403).json({ message: 'Token is invalid or expired', statusCode: 403 });\n        }\n        Users.findOne({\n          where: {\n            id: resolved.id\n          }\n        })\n          .then((user) => {\n            if (user) {\n              req.decoded = resolved;\n              return next();\n            }\n            return res.status(404).json({ message: 'User Not Found', statusCode: 404 });\n          });\n      });\n    } else {\n      return res.status(403).json({ message: 'No Token Was Provided', statusCode: 403 });\n    }\n  }\n}\n"]}